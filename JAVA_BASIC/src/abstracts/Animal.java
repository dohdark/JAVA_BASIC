package abstracts;

// abstract(추상)
//	: 실체 간에 공통되는 특성을 추출한 것!
// 예) 강아지, 고양이, 사자 등의 실체에서 공통되는 특성 추출 => 동물

//	: 동물과 같이 구체적인 실체라기 보다는 실체들의 공통되는 특성을 가지고 있는 추상적인 것!
//	abstract class는 실체 클래스가 공통적으로 가져야 할 필드와 메서드들을 정의해 놓은 추상적인 클래스
//	=> 실체 클래스의 멤버(필드, 메서드)를 통일화하는데 목적!

//	-추상클래스와 일반클래스는 상속의 관계를 가짐
//	-추상클래스는 부모, 일반클래스(실체)는 자식으로 구현되어
//	 실제클래스는 추상클래스의 모든 특성을 물려받고, 추가적인 특성을 가질 수 있다.
//	 여기서 특성이란 필드와 메서드를 의미
//	-추상적으로 정의할 테니, 사용자가 꼭 재정의(오버라이딩) 해서 사용하세요.
//	 어떤 행위(메서드)를 추상적으로 정의만 해놓고, 실제로 필요한 곳에서 필요에 따라 재정의
//	-추상 클래스는 강제성!!(메서드 오버라이딩 강제, 안하면 Error)
//	-추상 클래스는 미완성이기 때문에 단독으로 객체생성 불가, 반드시 일반 클래스에 상속해서 사용가능
//	※ 강제로 무엇인가 재정의할 때 사용 !!!

//	추상 문법
//	1. class와 method 앞에 지정어로만 사용 가능
//	2. 추상클래스는 일반변수, 추상메서드, 일반메서드, 생성자 가질 수 없음
//	3. 추상메서드 만드는 방법은 일반 메서드와 동일, 지정어 부분에 abstract 추가,
//	   추상메서드는 실체가 없기 때문에 void로 만들고, {}블록이 없음
//	4. 추상메서드는 추상클래스와 인터페이스 내에서만 사용 가능
//	5. 재정의만 하고 굳이 안에 내용을 채우지 않아도 됨
//	6. 추상클래스 내에 있는 일반 메서드는 재정의 안해도 됨(에러 안남)
//	7. 협업에서 사용, 본사에서 크게 추상클래스 만들고 부분을(추상 메서드) 다른 회사들에게 외주
//	   메서드명도 이미 정해져 있기 때문에 관리가 편함(실무에서는 abstract보다 인터페이스 선호)
//	8. 추상클래스와 일반클래스 중 어떤 것이 좋다고 정답 없음(다만 강제성이 필요할 때 abstract 사용)

// 추상클래스
public abstract class Animal { //class뒤에 abstract 는 추상메서드가 없으면 쓰지말자
	//일반 변수
	public String kind;
	
	//일반 함수
	public void breathe() {
		System.out.println("숨을 쉽니다.");
	}
	
	//추상 함수(추상 메서드)
	// -실행부{} 없음
	// - 반드시 자식클래스가 오버라이딩 해서 사용(강제성)
	// - 접근제한자는 public, protected, default만 사용가능 (private 금지)
	
	public abstract void sound(); // 추상 메서드

}

